Fri May 29 21:38:45 CST 2020
/public/software/apps/DeepLearning/TensorFlow/python-3.6.8-tf1.14-build/bin/python3
/opt/hpc/software/mpi/hpcx/v2.4.1/gcc-7.3.1/bin/mpirun
2020-05-29 21:41:29.389333: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libhip_hcc.so
2020-05-29 21:41:29.574212: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1651] Found device 0 with properties: 
name: Device 66a1
AMDGPU ISA: gfx906
memoryClockRate (GHz) 1.7
pciBusID 0000:04:00.0
2020-05-29 21:41:29.574416: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1651] Found device 1 with properties: 
name: Device 66a1
AMDGPU ISA: gfx906
memoryClockRate (GHz) 1.7
pciBusID 0000:26:00.0
2020-05-29 21:41:29.574535: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1651] Found device 2 with properties: 
name: Device 66a1
AMDGPU ISA: gfx906
memoryClockRate (GHz) 1.7
pciBusID 0000:43:00.0
2020-05-29 21:41:29.574652: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1651] Found device 3 with properties: 
name: Device 66a1
AMDGPU ISA: gfx906
memoryClockRate (GHz) 1.7
pciBusID 0000:63:00.0
2020-05-29 21:41:29.628970: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library librocblas.so
2020-05-29 21:41:29.639589: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libMIOpen.so
2020-05-29 21:41:29.646315: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library librocfft.so
2020-05-29 21:41:29.649319: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library librocrand.so
2020-05-29 21:41:29.650042: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1763] Adding visible gpu devices: 0, 1, 2, 3
{'class_names': ['BG', 'person', 'sneakers', 'chair', 'hat', 'lamp', 'bottle', 'cabinet/shelf', 'cup', 'car', 'glasses', 'picture/frame', 'desk', 'handbag', 'streetlights', 'book', 'plate', 'helmet', 'leather shoes', 'pillow', 'glove', 'potted plant', 'bracelet', 'flower', 'tv', 'storage box', 'vase', 'bench', 'wine glass', 'boots', 'bowl', 'dining table', 'umbrella', 'boat', 'flag', 'speaker', 'trash bin/can', 'stool', 'backpack', 'couch', 'belt', 'carpet', 'basket', 'towel/napkin', 'slippers', 'barrel/bucket', 'coffee table', 'suv', 'toy', 'tie', 'bed', 'traffic light', 'pen/pencil', 'microphone', 'sandals', 'canned', 'necklace', 'mirror', 'faucet', 'bicycle', 'bread', 'high heels', 'ring', 'van', 'watch', 'sink', 'horse', 'fish', 'apple', 'camera', 'candle', 'teddy bear', 'cake', 'motorcycle', 'wild bird', 'laptop', 'knife', 'traffic sign', 'cell phone', 'paddle', 'truck', 'cow', 'power outlet', 'clock', 'drum', 'fork', 'bus', 'hanger', 'nightstand', 'pot/pan', 'sheep', 'guitar', 'traffic cone', 'tea pot', 'keyboard', 'tripod', 'hockey', 'fan', 'dog', 'spoon', 'blackboard/whiteboard', 'balloon', 'air conditioner', 'cymbal', 'mouse', 'telephone', 'pickup truck', 'orange', 'banana', 'airplane', 'luggage', 'skis', 'soccer', 'trolley', 'oven', 'remote', 'baseball glove', 'paper towel', 'refrigerator', 'train', 'tomato', 'machinery vehicle', 'tent', 'shampoo/shower gel', 'head phone', 'lantern', 'donut', 'cleaning products', 'sailboat', 'tangerine', 'pizza', 'kite', 'computer box', 'elephant', 'toiletries', 'gas stove', 'broccoli', 'toilet', 'stroller', 'shovel', 'baseball bat', 'microwave', 'skateboard', 'surfboard', 'surveillance camera', 'gun', 'life saver', 'cat', 'lemon', 'liquid soap', 'zebra', 'duck', 'sports car', 'giraffe', 'pumpkin', 'piano', 'stop sign', 'radiator', 'converter', 'tissue ', 'carrot', 'washing machine', 'vent', 'cookies', 'cutting/chopping board', 'tennis racket', 'candy', 'skating and skiing shoes', 'scissors', 'folder', 'baseball', 'strawberry', 'bow tie', 'pigeon', 'pepper', 'coffee machine', 'bathtub', 'snowboard', 'suitcase', 'grapes', 'ladder', 'pear', 'american football', 'basketball', 'potato', 'paint brush', 'printer', 'billiards', 'fire hydrant', 'goose', 'projector', 'sausage', 'fire extinguisher', 'extension cord', 'facial mask', 'tennis ball', 'chopsticks', 'electronic stove and gas stove', 'pie', 'frisbee', 'kettle', 'hamburger', 'golf club', 'cucumber', 'clutch', 'blender', 'tong', 'slide', 'hot dog', 'toothbrush', 'facial cleanser', 'mango', 'deer', 'egg', 'violin', 'marker', 'ship', 'chicken', 'onion', 'ice cream', 'tape', 'wheelchair', 'plum', 'bar soap', 'scale', 'watermelon', 'cabbage', 'router/modem', 'golf ball', 'pine apple', 'crane', 'fire truck', 'peach', 'cello', 'notepaper', 'tricycle', 'toaster', 'helicopter', 'green beans', 'brush', 'carriage', 'cigar', 'earphone', 'penguin', 'hurdle', 'swing', 'radio', 'CD', 'parking meter', 'swan', 'garlic', 'french fries', 'horn', 'avocado', 'saxophone', 'trumpet', 'sandwich', 'cue', 'kiwi fruit', 'bear', 'fishing rod', 'cherry', 'tablet', 'green vegetables', 'nuts', 'corn', 'key', 'screwdriver', 'globe', 'broom', 'pliers', 'volleyball', 'hammer', 'eggplant', 'trophy', 'dates', 'board eraser', 'rice', 'tape measure/ruler', 'dumbbell', 'hamimelon', 'stapler', 'camel', 'lettuce', 'goldfish', 'meat balls', 'medal', 'toothpaste', 'antelope', 'shrimp', 'rickshaw', 'trombone', 'pomegranate', 'coconut', 'jellyfish', 'mushroom', 'calculator', 'treadmill', 'butterfly', 'egg tart', 'cheese', 'pig', 'pomelo', 'race car', 'rice cooker', 'tuba', 'crosswalk sign', 'papaya', 'hair drier', 'green onion', 'chips', 'dolphin', 'sushi', 'urinal', 'donkey', 'electric drill', 'spring rolls', 'tortoise/turtle', 'parrot', 'flute', 'measuring cup', 'shark', 'steak', 'poker card', 'binoculars', 'llama', 'radish', 'noodles', 'yak', 'mop', 'crab', 'microscope', 'barbell', 'bread/bun', 'baozi', 'lion', 'red cabbage', 'polar bear', 'lighter', 'seal', 'mangosteen', 'comb', 'eraser', 'pitaya', 'scallop', 'pencil case', 'saw', 'table tennis paddle', 'okra', 'starfish', 'eagle', 'monkey', 'durian', 'game board', 'rabbit', 'french horn', 'ambulance', 'asparagus', 'hoverboard', 'pasta', 'target', 'hotair balloon', 'chainsaw', 'lobster', 'iron', 'flashlight']}
[32m[0529 21:41:29 @concurrency.py:263][0m [5m[31mWRN[0m Command 'nvidia-smi -L' failed, return code=127
[32m[0529 21:41:29 @concurrency.py:264][0m [5m[31mWRN[0m /bin/sh: nvidia-smi: command not found

[32m[0529 21:41:29 @gpu.py:59][0m Loading local devices by TensorFlow ...
[32m[0529 21:41:29 @config.py:313][0m Config: ------------------------------------------
{'BACKBONE': {'FREEZE_AFFINE': False,
              'FREEZE_AT': 2,
              'NORM': 'FreezeBN',
              'RESNET_NUM_BLOCKS': [3, 4, 6, 3],
              'STRIDE_1X1': False,
              'TF_PAD_MODE': False,
              'WEIGHTS': './weights/ImageNet-R50-AlignPadding.npz'},
 'CASCADE': {'BBOX_REG_WEIGHTS': [[10.0, 10.0, 5.0, 5.0], [20.0, 20.0, 10.0, 10.0],
                                  [30.0, 30.0, 15.0, 15.0]],
             'IOUS': [0.5, 0.6, 0.7]},
 'DATA': {'ABSOLUTE_COORD': True,
          'BASEDIR': '/work/DeepLearning/Data/objects365/',
          'CLASS_NAMES': ['BG', 'person', 'sneakers', 'chair', 'hat', 'lamp', 'bottle',
                          'cabinet/shelf', 'cup', 'car', 'glasses', 'picture/frame', 'desk',
                          'handbag', 'streetlights', 'book', 'plate', 'helmet', 'leather shoes',
                          'pillow', 'glove', 'potted plant', 'bracelet', 'flower', 'tv',
                          'storage box', 'vase', 'bench', 'wine glass', 'boots', 'bowl',
                          'dining table', 'umbrella', 'boat', 'flag', 'speaker', 'trash bin/can',
                          'stool', 'backpack', 'couch', 'belt', 'carpet', 'basket', 'towel/napkin',
                          'slippers', 'barrel/bucket', 'coffee table', 'suv', 'toy', 'tie', 'bed',
                          'traffic light', 'pen/pencil', 'microphone', 'sandals', 'canned',
                          'necklace', 'mirror', 'faucet', 'bicycle', 'bread', 'high heels', 'ring',
                          'van', 'watch', 'sink', 'horse', 'fish', 'apple', 'camera', 'candle',
                          'teddy bear', 'cake', 'motorcycle', 'wild bird', 'laptop', 'knife',
                          'traffic sign', 'cell phone', 'paddle', 'truck', 'cow', 'power outlet',
                          'clock', 'drum', 'fork', 'bus', 'hanger', 'nightstand', 'pot/pan',
                          'sheep', 'guitar', 'traffic cone', 'tea pot', 'keyboard', 'tripod',
                          'hockey', 'fan', 'dog', 'spoon', 'blackboard/whiteboard', 'balloon',
                          'air conditioner', 'cymbal', 'mouse', 'telephone', 'pickup truck',
                          'orange', 'banana', 'airplane', 'luggage', 'skis', 'soccer', 'trolley',
                          'oven', 'remote', 'baseball glove', 'paper towel', 'refrigerator',
                          'train', 'tomato', 'machinery vehicle', 'tent', 'shampoo/shower gel',
                          'head phone', 'lantern', 'donut', 'cleaning products', 'sailboat',
                          'tangerine', 'pizza', 'kite', 'computer box', 'elephant', 'toiletries',
                          'gas stove', 'broccoli', 'toilet', 'stroller', 'shovel', 'baseball bat',
                          'microwave', 'skateboard', 'surfboard', 'surveillance camera', 'gun',
                          'life saver', 'cat', 'lemon', 'liquid soap', 'zebra', 'duck',
                          'sports car', 'giraffe', 'pumpkin', 'piano', 'stop sign', 'radiator',
                          'converter', 'tissue ', 'carrot', 'washing machine', 'vent', 'cookies',
                          'cutting/chopping board', 'tennis racket', 'candy',
                          'skating and skiing shoes', 'scissors', 'folder', 'baseball',
                          'strawberry', 'bow tie', 'pigeon', 'pepper', 'coffee machine', 'bathtub',
                          'snowboard', 'suitcase', 'grapes', 'ladder', 'pear', 'american football',
                          'basketball', 'potato', 'paint brush', 'printer', 'billiards',
                          'fire hydrant', 'goose', 'projector', 'sausage', 'fire extinguisher',
                          'extension cord', 'facial mask', 'tennis ball', 'chopsticks',
                          'electronic stove and gas stove', 'pie', 'frisbee', 'kettle', 'hamburger',
                          'golf club', 'cucumber', 'clutch', 'blender', 'tong', 'slide', 'hot dog',
                          'toothbrush', 'facial cleanser', 'mango', 'deer', 'egg', 'violin',
                          'marker', 'ship', 'chicken', 'onion', 'ice cream', 'tape', 'wheelchair',
                          'plum', 'bar soap', 'scale', 'watermelon', 'cabbage', 'router/modem',
                          'golf ball', 'pine apple', 'crane', 'fire truck', 'peach', 'cello',
                          'notepaper', 'tricycle', 'toaster', 'helicopter', 'green beans', 'brush',
                          'carriage', 'cigar', 'earphone', 'penguin', 'hurdle', 'swing', 'radio',
                          'CD', 'parking meter', 'swan', 'garlic', 'french fries', 'horn',
                          'avocado', 'saxophone', 'trumpet', 'sandwich', 'cue', 'kiwi fruit',
                          'bear', 'fishing rod', 'cherry', 'tablet', 'green vegetables', 'nuts',
                          'corn', 'key', 'screwdriver', 'globe', 'broom', 'pliers', 'volleyball',
                          'hammer', 'eggplant', 'trophy', 'dates', 'board eraser', 'rice',
                          'tape measure/ruler', 'dumbbell', 'hamimelon', 'stapler', 'camel',
                          'lettuce', 'goldfish', 'meat balls', 'medal', 'toothpaste', 'antelope',
                          'shrimp', 'rickshaw', 'trombone', 'pomegranate', 'coconut', 'jellyfish',
                          'mushroom', 'calculator', 'treadmill', 'butterfly', 'egg tart', 'cheese',
                          'pig', 'pomelo', 'race car', 'rice cooker', 'tuba', 'crosswalk sign',
                          'papaya', 'hair drier', 'green onion', 'chips', 'dolphin', 'sushi',
                          'urinal', 'donkey', 'electric drill', 'spring rolls', 'tortoise/turtle',
                          'parrot', 'flute', 'measuring cup', 'shark', 'steak', 'poker card',
                          'binoculars', 'llama', 'radish', 'noodles', 'yak', 'mop', 'crab',
                          'microscope', 'barbell', 'bread/bun', 'baozi', 'lion', 'red cabbage',
                          'polar bear', 'lighter', 'seal', 'mangosteen', 'comb', 'eraser', 'pitaya',
                          'scallop', 'pencil case', 'saw', 'table tennis paddle', 'okra',
                          'starfish', 'eagle', 'monkey', 'durian', 'game board', 'rabbit',
                          'french horn', 'ambulance', 'asparagus', 'hoverboard', 'pasta', 'target',
                          'hotair balloon', 'chainsaw', 'lobster', 'iron', 'flashlight'],
          'NUM_CATEGORY': 365,
          'NUM_WORKERS': 1,
          'TEST': ('test',),
          'TRAIN': ('objects365_train.json',),
          'VAL': ('objects365_val.json',)},
 'FPN': {'ANCHOR_STRIDES': (4, 8, 16, 32, 64),
         'CASCADE': False,
         'FRCNN_CONV_HEAD_DIM': 256,
         'FRCNN_FC_HEAD_DIM': 1024,
         'FRCNN_HEAD_FUNC': 'fastrcnn_2fc_head',
         'MRCNN_HEAD_FUNC': 'maskrcnn_up4conv_head',
         'NORM': 'None',
         'NUM_CHANNEL': 256,
         'PROPOSAL_MODE': 'Level',
         'RESOLUTION_REQUIREMENT': 32},
 'FRCNN': {'BATCH_PER_IM': 512,
           'BBOX_REG_WEIGHTS': [10.0, 10.0, 5.0, 5.0],
           'FG_RATIO': 0.25,
           'FG_THRESH': 0.5},
 'MODE_FPN': True,
 'MODE_MASK': False,
 'MRCNN': {'ACCURATE_PASTE': True, 'HEAD_DIM': 256},
 'PREPROC': {'MAX_SIZE': 1344.0,
             'PIXEL_MEAN': [123.675, 116.28, 103.53],
             'PIXEL_STD': [58.395, 57.12, 57.375],
             'TEST_SHORT_EDGE_SIZE': 800,
             'TRAIN_SHORT_EDGE_SIZE': [800, 800]},
 'RPN': {'ANCHOR_RATIOS': (0.5, 1.0, 2.0),
         'ANCHOR_SIZES': (32, 64, 128, 256, 512),
         'ANCHOR_STRIDE': 16,
         'BATCH_PER_IM': 256,
         'CROWD_OVERLAP_THRESH': 9.99,
         'FG_RATIO': 0.5,
         'HEAD_DIM': 1024,
         'MIN_SIZE': 0,
         'NEGATIVE_ANCHOR_THRESH': 0.3,
         'NUM_ANCHOR': 15,
         'POSITIVE_ANCHOR_THRESH': 0.7,
         'PROPOSAL_NMS_THRESH': 0.7,
         'TEST_PER_LEVEL_NMS_TOPK': 1000,
         'TEST_POST_NMS_TOPK': 1000,
         'TEST_PRE_NMS_TOPK': 6000,
         'TRAIN_PER_LEVEL_NMS_TOPK': 2000,
         'TRAIN_POST_NMS_TOPK': 2000,
         'TRAIN_PRE_NMS_TOPK': 12000},
 'TEST': {'FRCNN_NMS_THRESH': 0.5,
          'RESULTS_PER_IM': 100,
          'RESULT_SCORE_THRESH': 0.05,
          'RESULT_SCORE_THRESH_VIS': 0.5},
 'TRAIN': {'BASE_LR': 0.01,
           'CHECKPOINT_PERIOD': 5,
           'EVAL_PERIOD': 300,
           'LR_SCHEDULE': [720000, 960000, 1080000],
           'NUM_GPUS': 4,
           'STARTING_EPOCH': 1,
           'STEPS_PER_EPOCH': 500,
           'WARMUP': 1000,
           'WARMUP_INIT_LR': 0.0033000000000000004,
           'WEIGHT_DECAY': 0.0001},
 'TRAINER': 'horovod'}
[32m[0529 21:41:29 @multigpu.py:44][0m Building graph for predict tower 'tower0' on device /gpu:0 ...
[32m[0529 21:41:30 @registry.py:90][0m 'conv0': [1, 3, ?, ?] --> [1, 64, ?, ?]
[32m[0529 21:41:30 @registry.py:90][0m 'pool0': [1, 64, ?, ?] --> [1, 64, ?, ?]
[32m[0529 21:41:30 @registry.py:90][0m 'group0/block0/conv1': [1, 64, ?, ?] --> [1, 64, ?, ?]
[32m[0529 21:41:30 @registry.py:90][0m 'group0/block0/conv2': [1, 64, ?, ?] --> [1, 64, ?, ?]
[32m[0529 21:41:30 @registry.py:90][0m 'group0/block0/conv3': [1, 64, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:30 @registry.py:90][0m 'group0/block0/convshortcut': [1, 64, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:30 @registry.py:90][0m 'group0/block1/conv1': [1, 256, ?, ?] --> [1, 64, ?, ?]
[32m[0529 21:41:30 @registry.py:90][0m 'group0/block1/conv2': [1, 64, ?, ?] --> [1, 64, ?, ?]
[32m[0529 21:41:30 @registry.py:90][0m 'group0/block1/conv3': [1, 64, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:30 @registry.py:90][0m 'group0/block2/conv1': [1, 256, ?, ?] --> [1, 64, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group0/block2/conv2': [1, 64, ?, ?] --> [1, 64, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group0/block2/conv3': [1, 64, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block0/conv1': [1, 256, ?, ?] --> [1, 128, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block0/conv2': [1, 128, ?, ?] --> [1, 128, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block0/conv3': [1, 128, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block0/convshortcut': [1, 256, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block1/conv1': [1, 512, ?, ?] --> [1, 128, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block1/conv2': [1, 128, ?, ?] --> [1, 128, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block1/conv3': [1, 128, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block2/conv1': [1, 512, ?, ?] --> [1, 128, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block2/conv2': [1, 128, ?, ?] --> [1, 128, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block2/conv3': [1, 128, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block3/conv1': [1, 512, ?, ?] --> [1, 128, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block3/conv2': [1, 128, ?, ?] --> [1, 128, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group1/block3/conv3': [1, 128, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block0/conv1': [1, 512, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block0/conv2': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block0/conv3': [1, 256, ?, ?] --> [1, 1024, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block0/convshortcut': [1, 512, ?, ?] --> [1, 1024, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block1/conv1': [1, 1024, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block1/conv2': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block1/conv3': [1, 256, ?, ?] --> [1, 1024, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block2/conv1': [1, 1024, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block2/conv2': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block2/conv3': [1, 256, ?, ?] --> [1, 1024, ?, ?]
[32m[0529 21:41:31 @registry.py:90][0m 'group2/block3/conv1': [1, 1024, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group2/block3/conv2': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group2/block3/conv3': [1, 256, ?, ?] --> [1, 1024, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group2/block4/conv1': [1, 1024, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group2/block4/conv2': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group2/block4/conv3': [1, 256, ?, ?] --> [1, 1024, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group2/block5/conv1': [1, 1024, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group2/block5/conv2': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group2/block5/conv3': [1, 256, ?, ?] --> [1, 1024, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block0/conv1': [1, 1024, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block0/conv2': [1, 512, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block0/conv3': [1, 512, ?, ?] --> [1, 2048, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block0/convshortcut': [1, 1024, ?, ?] --> [1, 2048, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block1/conv1': [1, 2048, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block1/conv2': [1, 512, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block1/conv3': [1, 512, ?, ?] --> [1, 2048, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block2/conv1': [1, 2048, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block2/conv2': [1, 512, ?, ?] --> [1, 512, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m 'group3/block2/conv3': [1, 512, ?, ?] --> [1, 2048, ?, ?]
[32m[0529 21:41:32 @registry.py:80][0m 'fpn' input: [1, 256, ?, ?], [1, 512, ?, ?], [1, 1024, ?, ?], [1, 2048, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/lateral_1x1_c2': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/lateral_1x1_c3': [1, 512, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/lateral_1x1_c4': [1, 1024, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/lateral_1x1_c5': [1, 2048, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/upsample_lat5': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/upsample_lat4': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/upsample_lat3': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/posthoc_3x3_p2': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/posthoc_3x3_p3': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/posthoc_3x3_p4': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/posthoc_3x3_p5': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:90][0m   'fpn/maxpool_p6': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:32 @registry.py:93][0m 'fpn' output: [1, 256, ?, ?], [1, 256, ?, ?], [1, 256, ?, ?], [1, 256, ?, ?], [1, 256, ?, ?]
[32m[0529 21:41:33 @registry.py:80][0m 'rpn' input: [1, 256, ?, ?]
[32m[0529 21:41:33 @registry.py:90][0m   'rpn/conv0': [1, 256, ?, ?] --> [1, 256, ?, ?]
[32m[0529 21:41:33 @registry.py:90][0m   'rpn/class': [1, 256, ?, ?] --> [1, 3, ?, ?]
[32m[0529 21:41:33 @registry.py:90][0m   'rpn/box': [1, 256, ?, ?] --> [1, 12, ?, ?]
[32m[0529 21:41:33 @registry.py:93][0m 'rpn' output: [?, ?, 3], [?, ?, 3, 4]
[32m[0529 21:41:33 @registry.py:80][0m 'fastrcnn' input: [?, 256, 7, 7]
[32m[0529 21:41:34 @registry.py:90][0m   'fastrcnn/fc6': [?, 256, 7, 7] --> [?, 1024]
[32m[0529 21:41:34 @registry.py:90][0m   'fastrcnn/fc7': [?, 1024] --> [?, 1024]
[32m[0529 21:41:34 @registry.py:93][0m 'fastrcnn' output: [?, 1024]
[32m[0529 21:41:34 @registry.py:80][0m 'fastrcnn/outputs' input: [?, 1024]
[32m[0529 21:41:34 @registry.py:90][0m   'fastrcnn/outputs/class': [?, 1024] --> [?, 366]
[32m[0529 21:41:34 @registry.py:90][0m   'fastrcnn/outputs/box': [?, 1024] --> [?, 1464]
[32m[0529 21:41:34 @registry.py:93][0m 'fastrcnn/outputs' output: [?, 366], [?, 366, 4]
[32m[0529 21:41:34 @collection.py:146][0m New collections created in tower tower0: tf.GraphKeys.MODEL_VARIABLES of size 55
[32m[0529 21:41:34 @multigpu.py:44][0m Building graph for predict tower 'tower1' on device /gpu:1 ...
[32m[0529 21:41:35 @collection.py:152][0m Size of these collections were changed in tower1: (tf.GraphKeys.MODEL_VARIABLES: 55->110)
[32m[0529 21:41:35 @multigpu.py:44][0m Building graph for predict tower 'tower2' on device /gpu:2 ...
[32m[0529 21:41:37 @collection.py:152][0m Size of these collections were changed in tower2: (tf.GraphKeys.MODEL_VARIABLES: 110->165)
[32m[0529 21:41:37 @multigpu.py:44][0m Building graph for predict tower 'tower3' on device /gpu:3 ...
[32m[0529 21:41:39 @collection.py:152][0m Size of these collections were changed in tower3: (tf.GraphKeys.MODEL_VARIABLES: 165->220)
[32m[0529 21:41:39 @sessinit.py:87][0m [5m[31mWRN[0m The following variables are in the checkpoint, but not found in the graph: global_step, learning_rate
2020-05-29 21:41:39.570039: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2000074999 Hz
2020-05-29 21:41:39.571780: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0xabf6530 executing computations on platform Host. Devices:
2020-05-29 21:41:39.571903: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): <undefined>, <undefined>
2020-05-29 21:41:39.575598: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0xabf8f90 executing computations on platform ROCM. Devices:
2020-05-29 21:41:39.575661: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Device 66a1, AMDGPU ISA version: gfx906
2020-05-29 21:41:39.575693: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (1): Device 66a1, AMDGPU ISA version: gfx906
2020-05-29 21:41:39.575726: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (2): Device 66a1, AMDGPU ISA version: gfx906
2020-05-29 21:41:39.575756: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (3): Device 66a1, AMDGPU ISA version: gfx906
2020-05-29 21:41:39.577106: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1651] Found device 0 with properties: 
name: Device 66a1
AMDGPU ISA: gfx906
memoryClockRate (GHz) 1.7
pciBusID 0000:04:00.0
2020-05-29 21:41:39.577261: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1651] Found device 1 with properties: 
name: Device 66a1
AMDGPU ISA: gfx906
memoryClockRate (GHz) 1.7
pciBusID 0000:26:00.0
2020-05-29 21:41:39.577380: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1651] Found device 2 with properties: 
name: Device 66a1
AMDGPU ISA: gfx906
memoryClockRate (GHz) 1.7
pciBusID 0000:43:00.0
2020-05-29 21:41:39.577494: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1651] Found device 3 with properties: 
name: Device 66a1
AMDGPU ISA: gfx906
memoryClockRate (GHz) 1.7
pciBusID 0000:63:00.0
2020-05-29 21:41:39.577662: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library librocblas.so
2020-05-29 21:41:39.577711: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libMIOpen.so
2020-05-29 21:41:39.577755: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library librocfft.so
2020-05-29 21:41:39.577796: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library librocrand.so
2020-05-29 21:41:39.578381: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1763] Adding visible gpu devices: 0, 1, 2, 3
2020-05-29 21:41:39.578453: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1181] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-05-29 21:41:39.578492: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1187]      0 1 2 3 
2020-05-29 21:41:39.578536: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1200] 0:   N Y Y Y 
2020-05-29 21:41:39.578566: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1200] 1:   Y N Y Y 
2020-05-29 21:41:39.578596: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1200] 2:   Y Y N Y 
2020-05-29 21:41:39.578624: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1200] 3:   Y Y Y N 
2020-05-29 21:41:39.579162: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1326] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 16204 MB memory) -> physical GPU (device: 0, name: Device 66a1, pci bus id: 0000:04:00.0)
2020-05-29 21:41:39.580386: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1326] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:1 with 16204 MB memory) -> physical GPU (device: 1, name: Device 66a1, pci bus id: 0000:26:00.0)
2020-05-29 21:41:39.581170: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1326] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:2 with 16204 MB memory) -> physical GPU (device: 2, name: Device 66a1, pci bus id: 0000:43:00.0)
2020-05-29 21:41:39.581925: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1326] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:3 with 16204 MB memory) -> physical GPU (device: 3, name: Device 66a1, pci bus id: 0000:63:00.0)
[32m[0529 21:43:03 @sessinit.py:114][0m Restoring checkpoint from train_log/log_1695222/model-92500 ...
[32m[0529 21:43:08 @predict.py:107][0m Evaluating test ...
Traceback (most recent call last):
  File "predict.py", line 185, in <module>
    do_test(predcfg, args.test)
  File "predict.py", line 110, in do_test
    for k in range(num_tower)]
  File "predict.py", line 110, in <listcomp>
    for k in range(num_tower)]
  File "/public/home/chauncc/PRA_Detection_TF/data.py", line 374, in get_eval_dataflow
    roidbs = DatasetRegistry.get(name).inference_roidbs()
  File "/public/home/chauncc/PRA_Detection_TF/dataset/dataset.py", line 96, in get
    return DatasetRegistry._registry[name]()
  File "/public/home/chauncc/PRA_Detection_TF/dataset/obj365.py", line 284, in <lambda>
    DatasetRegistry.register(name, lambda x=split: COCODetection(basedir, x))
  File "/public/home/chauncc/PRA_Detection_TF/dataset/obj365.py", line 63, in __init__
    assert os.path.isfile(annotation_file), annotation_file
AssertionError: /work/DeepLearning/Data/objects365/test
